import matplotlib.pyplot as plt
import random
import numpy as np

#creates the initial spin configuration with all spin down#
def initial_spin(N):
  s=[]
  s_row=[]
  for i in range(N):
    for j in range(N):
      s_row.append(-1)
    s.append(s_row)
    s_row=[]
  return s

#creates the random field configuration given by a gaussian distribution with standard deviation R#
def initial_randomfield(N,R):
  h=[]
  h_row=[]
  for i in range(N):
    for j in range(N):
      h_row.append(random.gauss(0, R))
    h.append(h_row)
    h_row=[]
  return h

#given a spin lattice s, this function flips the spin at a site (i,j) if S_{i,j}=-1#
def FlipSpin(s,i,j):
  if s[i][j] == -1 :
    s[i][j] = 1
  else:
    print("spin already fliped")


#create a list with the coordinates of the the neirghbors of the point (i,j), which may seem a pointless function to define in this case, however if we are considering a more complex graph instead of the square of cubic lattice, it's reasonale to write a code in terms of a general set of neighbours
def neighbours(i,j,N):
  # here the modulo operation %N is using to account the case where i or j is equal to N-1, and due to the periodic boundary conditions i+1 or j+1 should be taken to be 0#
  return [[(i+1)%N, j], [(i-1)%N, j], [i, (j+1)%N], [i, (j-1)%N]]

#we don't need to actually to count the number of spin up or spin down neirbours, we need only it's sum to calculate the field, so lets define a funtion to do it more compactly
def sum_spin(s,i,j):

    N=len(s)
    sum=0
    for n in neighbours(i,j,N=len(s)):
      sum+=s[n[0]][n[1]]
    return sum


def BruteForceNextAvalanche(s,h):
  #starting point that allow at least one site to have an internal field greater than this value
  max=-100

  for i in range(len(s)):
    for j in range(len(s)):
      #Calculates the internal fiel for each particle#
      internal_field= sum_spin(s,i,j)+h[i][j]
      # stores the maximum internal field found
      if internal_field > max and internal_field<0:
        max=internal_field
        max_i=i
        max_j=j

  return max, max_i, max_j

def PropagateAvalanche(s,h):
  N=len(s)
  M=np.array(s).sum()
  M_list=[M]
  avalanche_sizes=[]
  while M < len(s)**2:
    max, i_max, j_max = BruteForceNextAvalanche(s,h)

    FlipSpin(s, i_max, j_max)

    for i in range(N):
      for j in range(N):
        h[i][j]+= -max

    #create a list with the coordinates of the the neirghbors of the point (i,j)
    neighbourhood=neighbours(i_max, j_max, N)
    avalanche_size=1

    for neighbour in neighbourhood:
      i= neighbour[0]
      j= neighbour[1]

      #find which neighbours have achieved a positive internal field and then flips them
      if sum_spin(s, i, j)+h[i][j]>0 and s[i][j]==-1:
        FlipSpin(s, i, j)
        avalanche_size+=1

        #once a spin is flipped it's neighbours may be flipped as well and hence they must be added to the loop to be analysed until no more spin is flipped
        for n in neighbours(i, j, N):
          neighbourhood.append(n)

    M = np.array(s).sum()
    M_list.append(M)
    avalanche_sizes.append(avalanche_size)


  return M_list, avalanche_sizes

# Generate random data for the histogram
data = b
b_x=[]
for i in range(len(b)):
  b_x.append(i+1)

# Plotting a basic histogram
plt.plot(b_x, b)

# Adding labels and title
plt.xlabel('Avalanche')
plt.ylabel('Avalanche Size')
plt.title('Avalanche size evolution')

# Display the plot
plt.show()

data = a
a_x=[]
for i in range(len(a)):
  a_x.append(i+1)

# Plotting a basic histogram
plt.plot(a_x, a)

# Adding labels and title
plt.xlabel('Avalanche')
plt.ylabel('Magnetization')
plt.title('Magnetization evolution')

# Display the plot
plt.show()
